//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Reportes {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private ArbolDataTable tableArbol;
        
        private BosqueDataTable tableBosque;
        
        private DptoDataTable tableDpto;
        
        private EspecieDataTable tableEspecie;
        
        private HojaDataTable tableHoja;
        
        private MunicipioDataTable tableMunicipio;
        
        private ProvinciaDataTable tableProvincia;
        
        private RaizDataTable tableRaiz;
        
        private TalloDataTable tableTallo;
        
        private Tipo_SueloDataTable tableTipo_Suelo;
        
        private System.Data.DataRelation relationFK__Arbol__idBosque__145C0A3F;
        
        private System.Data.DataRelation relationFK__Arbol__idEspecie__1367E606;
        
        private System.Data.DataRelation relationFK__Hoja__idArbol__1A14E395;
        
        private System.Data.DataRelation relationFK__Bosque__idMunici__09DE7BCC;
        
        private System.Data.DataRelation relationFK__Municipio__idPro__060DEAE8;
        
        private System.Data.DataRelation relationFK__Provincia__idDpt__03317E3D;
        
        private System.Data.DataRelation relationFK__Raiz__idArbol__1CF15040;
        
        private System.Data.DataRelation relationFK__Tallo__idArbol__173876EA;
        
        private System.Data.DataRelation relationFK__Bosque__idTipo_S__08EA5793;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Arbol"] != null)) {
                    base.Tables.Add(new ArbolDataTable(ds.Tables["Arbol"]));
                }
                if ((ds.Tables["Bosque"] != null)) {
                    base.Tables.Add(new BosqueDataTable(ds.Tables["Bosque"]));
                }
                if ((ds.Tables["Dpto"] != null)) {
                    base.Tables.Add(new DptoDataTable(ds.Tables["Dpto"]));
                }
                if ((ds.Tables["Especie"] != null)) {
                    base.Tables.Add(new EspecieDataTable(ds.Tables["Especie"]));
                }
                if ((ds.Tables["Hoja"] != null)) {
                    base.Tables.Add(new HojaDataTable(ds.Tables["Hoja"]));
                }
                if ((ds.Tables["Municipio"] != null)) {
                    base.Tables.Add(new MunicipioDataTable(ds.Tables["Municipio"]));
                }
                if ((ds.Tables["Provincia"] != null)) {
                    base.Tables.Add(new ProvinciaDataTable(ds.Tables["Provincia"]));
                }
                if ((ds.Tables["Raiz"] != null)) {
                    base.Tables.Add(new RaizDataTable(ds.Tables["Raiz"]));
                }
                if ((ds.Tables["Tallo"] != null)) {
                    base.Tables.Add(new TalloDataTable(ds.Tables["Tallo"]));
                }
                if ((ds.Tables["Tipo_Suelo"] != null)) {
                    base.Tables.Add(new Tipo_SueloDataTable(ds.Tables["Tipo_Suelo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArbolDataTable Arbol {
            get {
                return this.tableArbol;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BosqueDataTable Bosque {
            get {
                return this.tableBosque;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DptoDataTable Dpto {
            get {
                return this.tableDpto;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EspecieDataTable Especie {
            get {
                return this.tableEspecie;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HojaDataTable Hoja {
            get {
                return this.tableHoja;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MunicipioDataTable Municipio {
            get {
                return this.tableMunicipio;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProvinciaDataTable Provincia {
            get {
                return this.tableProvincia;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RaizDataTable Raiz {
            get {
                return this.tableRaiz;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TalloDataTable Tallo {
            get {
                return this.tableTallo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Tipo_SueloDataTable Tipo_Suelo {
            get {
                return this.tableTipo_Suelo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Arbol"] != null)) {
                    base.Tables.Add(new ArbolDataTable(ds.Tables["Arbol"]));
                }
                if ((ds.Tables["Bosque"] != null)) {
                    base.Tables.Add(new BosqueDataTable(ds.Tables["Bosque"]));
                }
                if ((ds.Tables["Dpto"] != null)) {
                    base.Tables.Add(new DptoDataTable(ds.Tables["Dpto"]));
                }
                if ((ds.Tables["Especie"] != null)) {
                    base.Tables.Add(new EspecieDataTable(ds.Tables["Especie"]));
                }
                if ((ds.Tables["Hoja"] != null)) {
                    base.Tables.Add(new HojaDataTable(ds.Tables["Hoja"]));
                }
                if ((ds.Tables["Municipio"] != null)) {
                    base.Tables.Add(new MunicipioDataTable(ds.Tables["Municipio"]));
                }
                if ((ds.Tables["Provincia"] != null)) {
                    base.Tables.Add(new ProvinciaDataTable(ds.Tables["Provincia"]));
                }
                if ((ds.Tables["Raiz"] != null)) {
                    base.Tables.Add(new RaizDataTable(ds.Tables["Raiz"]));
                }
                if ((ds.Tables["Tallo"] != null)) {
                    base.Tables.Add(new TalloDataTable(ds.Tables["Tallo"]));
                }
                if ((ds.Tables["Tipo_Suelo"] != null)) {
                    base.Tables.Add(new Tipo_SueloDataTable(ds.Tables["Tipo_Suelo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableArbol = ((ArbolDataTable)(base.Tables["Arbol"]));
            if ((initTable == true)) {
                if ((this.tableArbol != null)) {
                    this.tableArbol.InitVars();
                }
            }
            this.tableBosque = ((BosqueDataTable)(base.Tables["Bosque"]));
            if ((initTable == true)) {
                if ((this.tableBosque != null)) {
                    this.tableBosque.InitVars();
                }
            }
            this.tableDpto = ((DptoDataTable)(base.Tables["Dpto"]));
            if ((initTable == true)) {
                if ((this.tableDpto != null)) {
                    this.tableDpto.InitVars();
                }
            }
            this.tableEspecie = ((EspecieDataTable)(base.Tables["Especie"]));
            if ((initTable == true)) {
                if ((this.tableEspecie != null)) {
                    this.tableEspecie.InitVars();
                }
            }
            this.tableHoja = ((HojaDataTable)(base.Tables["Hoja"]));
            if ((initTable == true)) {
                if ((this.tableHoja != null)) {
                    this.tableHoja.InitVars();
                }
            }
            this.tableMunicipio = ((MunicipioDataTable)(base.Tables["Municipio"]));
            if ((initTable == true)) {
                if ((this.tableMunicipio != null)) {
                    this.tableMunicipio.InitVars();
                }
            }
            this.tableProvincia = ((ProvinciaDataTable)(base.Tables["Provincia"]));
            if ((initTable == true)) {
                if ((this.tableProvincia != null)) {
                    this.tableProvincia.InitVars();
                }
            }
            this.tableRaiz = ((RaizDataTable)(base.Tables["Raiz"]));
            if ((initTable == true)) {
                if ((this.tableRaiz != null)) {
                    this.tableRaiz.InitVars();
                }
            }
            this.tableTallo = ((TalloDataTable)(base.Tables["Tallo"]));
            if ((initTable == true)) {
                if ((this.tableTallo != null)) {
                    this.tableTallo.InitVars();
                }
            }
            this.tableTipo_Suelo = ((Tipo_SueloDataTable)(base.Tables["Tipo_Suelo"]));
            if ((initTable == true)) {
                if ((this.tableTipo_Suelo != null)) {
                    this.tableTipo_Suelo.InitVars();
                }
            }
            this.relationFK__Arbol__idBosque__145C0A3F = this.Relations["FK__Arbol__idBosque__145C0A3F"];
            this.relationFK__Arbol__idEspecie__1367E606 = this.Relations["FK__Arbol__idEspecie__1367E606"];
            this.relationFK__Hoja__idArbol__1A14E395 = this.Relations["FK__Hoja__idArbol__1A14E395"];
            this.relationFK__Bosque__idMunici__09DE7BCC = this.Relations["FK__Bosque__idMunici__09DE7BCC"];
            this.relationFK__Municipio__idPro__060DEAE8 = this.Relations["FK__Municipio__idPro__060DEAE8"];
            this.relationFK__Provincia__idDpt__03317E3D = this.Relations["FK__Provincia__idDpt__03317E3D"];
            this.relationFK__Raiz__idArbol__1CF15040 = this.Relations["FK__Raiz__idArbol__1CF15040"];
            this.relationFK__Tallo__idArbol__173876EA = this.Relations["FK__Tallo__idArbol__173876EA"];
            this.relationFK__Bosque__idTipo_S__08EA5793 = this.Relations["FK__Bosque__idTipo_S__08EA5793"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableArbol = new ArbolDataTable();
            base.Tables.Add(this.tableArbol);
            this.tableBosque = new BosqueDataTable();
            base.Tables.Add(this.tableBosque);
            this.tableDpto = new DptoDataTable();
            base.Tables.Add(this.tableDpto);
            this.tableEspecie = new EspecieDataTable();
            base.Tables.Add(this.tableEspecie);
            this.tableHoja = new HojaDataTable();
            base.Tables.Add(this.tableHoja);
            this.tableMunicipio = new MunicipioDataTable();
            base.Tables.Add(this.tableMunicipio);
            this.tableProvincia = new ProvinciaDataTable();
            base.Tables.Add(this.tableProvincia);
            this.tableRaiz = new RaizDataTable();
            base.Tables.Add(this.tableRaiz);
            this.tableTallo = new TalloDataTable();
            base.Tables.Add(this.tableTallo);
            this.tableTipo_Suelo = new Tipo_SueloDataTable();
            base.Tables.Add(this.tableTipo_Suelo);
            this.relationFK__Arbol__idBosque__145C0A3F = new System.Data.DataRelation("FK__Arbol__idBosque__145C0A3F", new System.Data.DataColumn[] {
                        this.tableBosque.idBosqueColumn}, new System.Data.DataColumn[] {
                        this.tableArbol.idBosqueColumn}, false);
            this.Relations.Add(this.relationFK__Arbol__idBosque__145C0A3F);
            this.relationFK__Arbol__idEspecie__1367E606 = new System.Data.DataRelation("FK__Arbol__idEspecie__1367E606", new System.Data.DataColumn[] {
                        this.tableEspecie.idEspecieColumn}, new System.Data.DataColumn[] {
                        this.tableArbol.idEspecieColumn}, false);
            this.Relations.Add(this.relationFK__Arbol__idEspecie__1367E606);
            this.relationFK__Hoja__idArbol__1A14E395 = new System.Data.DataRelation("FK__Hoja__idArbol__1A14E395", new System.Data.DataColumn[] {
                        this.tableArbol.idArbolColumn}, new System.Data.DataColumn[] {
                        this.tableHoja.idArbolColumn}, false);
            this.Relations.Add(this.relationFK__Hoja__idArbol__1A14E395);
            this.relationFK__Bosque__idMunici__09DE7BCC = new System.Data.DataRelation("FK__Bosque__idMunici__09DE7BCC", new System.Data.DataColumn[] {
                        this.tableMunicipio.idMunicipioColumn}, new System.Data.DataColumn[] {
                        this.tableBosque.idMunicipioColumn}, false);
            this.Relations.Add(this.relationFK__Bosque__idMunici__09DE7BCC);
            this.relationFK__Municipio__idPro__060DEAE8 = new System.Data.DataRelation("FK__Municipio__idPro__060DEAE8", new System.Data.DataColumn[] {
                        this.tableProvincia.idProvinciaColumn}, new System.Data.DataColumn[] {
                        this.tableMunicipio.idProvinciaColumn}, false);
            this.Relations.Add(this.relationFK__Municipio__idPro__060DEAE8);
            this.relationFK__Provincia__idDpt__03317E3D = new System.Data.DataRelation("FK__Provincia__idDpt__03317E3D", new System.Data.DataColumn[] {
                        this.tableDpto.idDptoColumn}, new System.Data.DataColumn[] {
                        this.tableProvincia.idDptoColumn}, false);
            this.Relations.Add(this.relationFK__Provincia__idDpt__03317E3D);
            this.relationFK__Raiz__idArbol__1CF15040 = new System.Data.DataRelation("FK__Raiz__idArbol__1CF15040", new System.Data.DataColumn[] {
                        this.tableArbol.idArbolColumn}, new System.Data.DataColumn[] {
                        this.tableRaiz.idArbolColumn}, false);
            this.Relations.Add(this.relationFK__Raiz__idArbol__1CF15040);
            this.relationFK__Tallo__idArbol__173876EA = new System.Data.DataRelation("FK__Tallo__idArbol__173876EA", new System.Data.DataColumn[] {
                        this.tableArbol.idArbolColumn}, new System.Data.DataColumn[] {
                        this.tableTallo.idArbolColumn}, false);
            this.Relations.Add(this.relationFK__Tallo__idArbol__173876EA);
            this.relationFK__Bosque__idTipo_S__08EA5793 = new System.Data.DataRelation("FK__Bosque__idTipo_S__08EA5793", new System.Data.DataColumn[] {
                        this.tableTipo_Suelo.idTipo_SueloColumn}, new System.Data.DataColumn[] {
                        this.tableBosque.idTipo_SueloColumn}, false);
            this.Relations.Add(this.relationFK__Bosque__idTipo_S__08EA5793);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArbol() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBosque() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDpto() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEspecie() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHoja() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMunicipio() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProvincia() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRaiz() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTallo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTipo_Suelo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ArbolRowChangeEventHandler(object sender, ArbolRowChangeEvent e);
        
        public delegate void BosqueRowChangeEventHandler(object sender, BosqueRowChangeEvent e);
        
        public delegate void DptoRowChangeEventHandler(object sender, DptoRowChangeEvent e);
        
        public delegate void EspecieRowChangeEventHandler(object sender, EspecieRowChangeEvent e);
        
        public delegate void HojaRowChangeEventHandler(object sender, HojaRowChangeEvent e);
        
        public delegate void MunicipioRowChangeEventHandler(object sender, MunicipioRowChangeEvent e);
        
        public delegate void ProvinciaRowChangeEventHandler(object sender, ProvinciaRowChangeEvent e);
        
        public delegate void RaizRowChangeEventHandler(object sender, RaizRowChangeEvent e);
        
        public delegate void TalloRowChangeEventHandler(object sender, TalloRowChangeEvent e);
        
        public delegate void Tipo_SueloRowChangeEventHandler(object sender, Tipo_SueloRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArbolDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidArbol;
            
            private System.Data.DataColumn columnnombre_Arbol;
            
            private System.Data.DataColumn columnedad;
            
            private System.Data.DataColumn columnancho;
            
            private System.Data.DataColumn columnidEspecie;
            
            private System.Data.DataColumn columnidBosque;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolDataTable() {
                this.TableName = "Arbol";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArbolDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ArbolDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idArbolColumn {
                get {
                    return this.columnidArbol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_ArbolColumn {
                get {
                    return this.columnnombre_Arbol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edadColumn {
                get {
                    return this.columnedad;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn anchoColumn {
                get {
                    return this.columnancho;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idEspecieColumn {
                get {
                    return this.columnidEspecie;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idBosqueColumn {
                get {
                    return this.columnidBosque;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow this[int index] {
                get {
                    return ((ArbolRow)(this.Rows[index]));
                }
            }
            
            public event ArbolRowChangeEventHandler ArbolRowChanging;
            
            public event ArbolRowChangeEventHandler ArbolRowChanged;
            
            public event ArbolRowChangeEventHandler ArbolRowDeleting;
            
            public event ArbolRowChangeEventHandler ArbolRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArbolRow(ArbolRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow AddArbolRow(long idArbol, string nombre_Arbol, double edad, double ancho, EspecieRow parentEspecieRowByFK__Arbol__idEspecie__1367E606, BosqueRow parentBosqueRowByFK__Arbol__idBosque__145C0A3F) {
                ArbolRow rowArbolRow = ((ArbolRow)(this.NewRow()));
                rowArbolRow.ItemArray = new object[] {
                        idArbol,
                        nombre_Arbol,
                        edad,
                        ancho,
                        parentEspecieRowByFK__Arbol__idEspecie__1367E606[0],
                        parentBosqueRowByFK__Arbol__idBosque__145C0A3F[0]};
                this.Rows.Add(rowArbolRow);
                return rowArbolRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow FindByidArbol(long idArbol) {
                return ((ArbolRow)(this.Rows.Find(new object[] {
                            idArbol})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ArbolDataTable cln = ((ArbolDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ArbolDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidArbol = base.Columns["idArbol"];
                this.columnnombre_Arbol = base.Columns["nombre_Arbol"];
                this.columnedad = base.Columns["edad"];
                this.columnancho = base.Columns["ancho"];
                this.columnidEspecie = base.Columns["idEspecie"];
                this.columnidBosque = base.Columns["idBosque"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidArbol = new System.Data.DataColumn("idArbol", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidArbol);
                this.columnnombre_Arbol = new System.Data.DataColumn("nombre_Arbol", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_Arbol);
                this.columnedad = new System.Data.DataColumn("edad", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnedad);
                this.columnancho = new System.Data.DataColumn("ancho", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnancho);
                this.columnidEspecie = new System.Data.DataColumn("idEspecie", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidEspecie);
                this.columnidBosque = new System.Data.DataColumn("idBosque", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidBosque);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidArbol}, true));
                this.columnidArbol.AllowDBNull = false;
                this.columnidArbol.Unique = true;
                this.columnnombre_Arbol.AllowDBNull = false;
                this.columnnombre_Arbol.MaxLength = 70;
                this.columnidEspecie.AllowDBNull = false;
                this.columnidBosque.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow NewArbolRow() {
                return ((ArbolRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ArbolRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ArbolRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArbolRowChanged != null)) {
                    this.ArbolRowChanged(this, new ArbolRowChangeEvent(((ArbolRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArbolRowChanging != null)) {
                    this.ArbolRowChanging(this, new ArbolRowChangeEvent(((ArbolRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArbolRowDeleted != null)) {
                    this.ArbolRowDeleted(this, new ArbolRowChangeEvent(((ArbolRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArbolRowDeleting != null)) {
                    this.ArbolRowDeleting(this, new ArbolRowChangeEvent(((ArbolRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArbolRow(ArbolRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArbolDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BosqueDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidBosque;
            
            private System.Data.DataColumn columnhectaria;
            
            private System.Data.DataColumn columnidTipo_Suelo;
            
            private System.Data.DataColumn columnidMunicipio;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueDataTable() {
                this.TableName = "Bosque";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BosqueDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BosqueDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idBosqueColumn {
                get {
                    return this.columnidBosque;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn hectariaColumn {
                get {
                    return this.columnhectaria;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idTipo_SueloColumn {
                get {
                    return this.columnidTipo_Suelo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idMunicipioColumn {
                get {
                    return this.columnidMunicipio;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow this[int index] {
                get {
                    return ((BosqueRow)(this.Rows[index]));
                }
            }
            
            public event BosqueRowChangeEventHandler BosqueRowChanging;
            
            public event BosqueRowChangeEventHandler BosqueRowChanged;
            
            public event BosqueRowChangeEventHandler BosqueRowDeleting;
            
            public event BosqueRowChangeEventHandler BosqueRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBosqueRow(BosqueRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow AddBosqueRow(long idBosque, double hectaria, Tipo_SueloRow parentTipo_SueloRowByFK__Bosque__idTipo_S__08EA5793, MunicipioRow parentMunicipioRowByFK__Bosque__idMunici__09DE7BCC) {
                BosqueRow rowBosqueRow = ((BosqueRow)(this.NewRow()));
                rowBosqueRow.ItemArray = new object[] {
                        idBosque,
                        hectaria,
                        parentTipo_SueloRowByFK__Bosque__idTipo_S__08EA5793[0],
                        parentMunicipioRowByFK__Bosque__idMunici__09DE7BCC[0]};
                this.Rows.Add(rowBosqueRow);
                return rowBosqueRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow FindByidBosque(long idBosque) {
                return ((BosqueRow)(this.Rows.Find(new object[] {
                            idBosque})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BosqueDataTable cln = ((BosqueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BosqueDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidBosque = base.Columns["idBosque"];
                this.columnhectaria = base.Columns["hectaria"];
                this.columnidTipo_Suelo = base.Columns["idTipo_Suelo"];
                this.columnidMunicipio = base.Columns["idMunicipio"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidBosque = new System.Data.DataColumn("idBosque", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidBosque);
                this.columnhectaria = new System.Data.DataColumn("hectaria", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhectaria);
                this.columnidTipo_Suelo = new System.Data.DataColumn("idTipo_Suelo", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidTipo_Suelo);
                this.columnidMunicipio = new System.Data.DataColumn("idMunicipio", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidMunicipio);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidBosque}, true));
                this.columnidBosque.AllowDBNull = false;
                this.columnidBosque.Unique = true;
                this.columnhectaria.AllowDBNull = false;
                this.columnidTipo_Suelo.AllowDBNull = false;
                this.columnidMunicipio.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow NewBosqueRow() {
                return ((BosqueRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BosqueRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BosqueRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BosqueRowChanged != null)) {
                    this.BosqueRowChanged(this, new BosqueRowChangeEvent(((BosqueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BosqueRowChanging != null)) {
                    this.BosqueRowChanging(this, new BosqueRowChangeEvent(((BosqueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BosqueRowDeleted != null)) {
                    this.BosqueRowDeleted(this, new BosqueRowChangeEvent(((BosqueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BosqueRowDeleting != null)) {
                    this.BosqueRowDeleting(this, new BosqueRowChangeEvent(((BosqueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBosqueRow(BosqueRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BosqueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DptoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidDpto;
            
            private System.Data.DataColumn columnnombre_Dpto;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoDataTable() {
                this.TableName = "Dpto";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DptoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DptoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idDptoColumn {
                get {
                    return this.columnidDpto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_DptoColumn {
                get {
                    return this.columnnombre_Dpto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRow this[int index] {
                get {
                    return ((DptoRow)(this.Rows[index]));
                }
            }
            
            public event DptoRowChangeEventHandler DptoRowChanging;
            
            public event DptoRowChangeEventHandler DptoRowChanged;
            
            public event DptoRowChangeEventHandler DptoRowDeleting;
            
            public event DptoRowChangeEventHandler DptoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDptoRow(DptoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRow AddDptoRow(long idDpto, string nombre_Dpto) {
                DptoRow rowDptoRow = ((DptoRow)(this.NewRow()));
                rowDptoRow.ItemArray = new object[] {
                        idDpto,
                        nombre_Dpto};
                this.Rows.Add(rowDptoRow);
                return rowDptoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRow FindByidDpto(long idDpto) {
                return ((DptoRow)(this.Rows.Find(new object[] {
                            idDpto})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DptoDataTable cln = ((DptoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DptoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidDpto = base.Columns["idDpto"];
                this.columnnombre_Dpto = base.Columns["nombre_Dpto"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidDpto = new System.Data.DataColumn("idDpto", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidDpto);
                this.columnnombre_Dpto = new System.Data.DataColumn("nombre_Dpto", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_Dpto);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidDpto}, true));
                this.columnidDpto.AllowDBNull = false;
                this.columnidDpto.Unique = true;
                this.columnnombre_Dpto.AllowDBNull = false;
                this.columnnombre_Dpto.MaxLength = 70;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRow NewDptoRow() {
                return ((DptoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DptoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DptoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DptoRowChanged != null)) {
                    this.DptoRowChanged(this, new DptoRowChangeEvent(((DptoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DptoRowChanging != null)) {
                    this.DptoRowChanging(this, new DptoRowChangeEvent(((DptoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DptoRowDeleted != null)) {
                    this.DptoRowDeleted(this, new DptoRowChangeEvent(((DptoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DptoRowDeleting != null)) {
                    this.DptoRowDeleting(this, new DptoRowChangeEvent(((DptoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDptoRow(DptoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DptoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EspecieDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidEspecie;
            
            private System.Data.DataColumn columnnombre_Especie;
            
            private System.Data.DataColumn columnnombre_Comun;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieDataTable() {
                this.TableName = "Especie";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecieDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EspecieDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idEspecieColumn {
                get {
                    return this.columnidEspecie;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_EspecieColumn {
                get {
                    return this.columnnombre_Especie;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_ComunColumn {
                get {
                    return this.columnnombre_Comun;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRow this[int index] {
                get {
                    return ((EspecieRow)(this.Rows[index]));
                }
            }
            
            public event EspecieRowChangeEventHandler EspecieRowChanging;
            
            public event EspecieRowChangeEventHandler EspecieRowChanged;
            
            public event EspecieRowChangeEventHandler EspecieRowDeleting;
            
            public event EspecieRowChangeEventHandler EspecieRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEspecieRow(EspecieRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRow AddEspecieRow(long idEspecie, string nombre_Especie, string nombre_Comun) {
                EspecieRow rowEspecieRow = ((EspecieRow)(this.NewRow()));
                rowEspecieRow.ItemArray = new object[] {
                        idEspecie,
                        nombre_Especie,
                        nombre_Comun};
                this.Rows.Add(rowEspecieRow);
                return rowEspecieRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRow FindByidEspecie(long idEspecie) {
                return ((EspecieRow)(this.Rows.Find(new object[] {
                            idEspecie})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EspecieDataTable cln = ((EspecieDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EspecieDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidEspecie = base.Columns["idEspecie"];
                this.columnnombre_Especie = base.Columns["nombre_Especie"];
                this.columnnombre_Comun = base.Columns["nombre_Comun"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidEspecie = new System.Data.DataColumn("idEspecie", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidEspecie);
                this.columnnombre_Especie = new System.Data.DataColumn("nombre_Especie", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_Especie);
                this.columnnombre_Comun = new System.Data.DataColumn("nombre_Comun", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_Comun);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidEspecie}, true));
                this.columnidEspecie.AllowDBNull = false;
                this.columnidEspecie.Unique = true;
                this.columnnombre_Especie.AllowDBNull = false;
                this.columnnombre_Especie.MaxLength = 70;
                this.columnnombre_Comun.AllowDBNull = false;
                this.columnnombre_Comun.MaxLength = 70;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRow NewEspecieRow() {
                return ((EspecieRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EspecieRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EspecieRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EspecieRowChanged != null)) {
                    this.EspecieRowChanged(this, new EspecieRowChangeEvent(((EspecieRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EspecieRowChanging != null)) {
                    this.EspecieRowChanging(this, new EspecieRowChangeEvent(((EspecieRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EspecieRowDeleted != null)) {
                    this.EspecieRowDeleted(this, new EspecieRowChangeEvent(((EspecieRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EspecieRowDeleting != null)) {
                    this.EspecieRowDeleting(this, new EspecieRowChangeEvent(((EspecieRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEspecieRow(EspecieRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EspecieDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HojaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidArbol;
            
            private System.Data.DataColumn columnforma;
            
            private System.Data.DataColumn columncolor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaDataTable() {
                this.TableName = "Hoja";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HojaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HojaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idArbolColumn {
                get {
                    return this.columnidArbol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn formaColumn {
                get {
                    return this.columnforma;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRow this[int index] {
                get {
                    return ((HojaRow)(this.Rows[index]));
                }
            }
            
            public event HojaRowChangeEventHandler HojaRowChanging;
            
            public event HojaRowChangeEventHandler HojaRowChanged;
            
            public event HojaRowChangeEventHandler HojaRowDeleting;
            
            public event HojaRowChangeEventHandler HojaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHojaRow(HojaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRow AddHojaRow(ArbolRow parentArbolRowByFK__Hoja__idArbol__1A14E395, string forma, string color) {
                HojaRow rowHojaRow = ((HojaRow)(this.NewRow()));
                rowHojaRow.ItemArray = new object[] {
                        parentArbolRowByFK__Hoja__idArbol__1A14E395[0],
                        forma,
                        color};
                this.Rows.Add(rowHojaRow);
                return rowHojaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRow FindByidArbol(long idArbol) {
                return ((HojaRow)(this.Rows.Find(new object[] {
                            idArbol})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HojaDataTable cln = ((HojaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HojaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidArbol = base.Columns["idArbol"];
                this.columnforma = base.Columns["forma"];
                this.columncolor = base.Columns["color"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidArbol = new System.Data.DataColumn("idArbol", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidArbol);
                this.columnforma = new System.Data.DataColumn("forma", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnforma);
                this.columncolor = new System.Data.DataColumn("color", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncolor);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidArbol}, true));
                this.columnidArbol.AllowDBNull = false;
                this.columnidArbol.Unique = true;
                this.columnforma.AllowDBNull = false;
                this.columnforma.MaxLength = 70;
                this.columncolor.AllowDBNull = false;
                this.columncolor.MaxLength = 70;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRow NewHojaRow() {
                return ((HojaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HojaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HojaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HojaRowChanged != null)) {
                    this.HojaRowChanged(this, new HojaRowChangeEvent(((HojaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HojaRowChanging != null)) {
                    this.HojaRowChanging(this, new HojaRowChangeEvent(((HojaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HojaRowDeleted != null)) {
                    this.HojaRowDeleted(this, new HojaRowChangeEvent(((HojaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HojaRowDeleting != null)) {
                    this.HojaRowDeleting(this, new HojaRowChangeEvent(((HojaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHojaRow(HojaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HojaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MunicipioDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidMunicipio;
            
            private System.Data.DataColumn columnnombre_Municipio;
            
            private System.Data.DataColumn columnidProvincia;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioDataTable() {
                this.TableName = "Municipio";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MunicipioDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MunicipioDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idMunicipioColumn {
                get {
                    return this.columnidMunicipio;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_MunicipioColumn {
                get {
                    return this.columnnombre_Municipio;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idProvinciaColumn {
                get {
                    return this.columnidProvincia;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow this[int index] {
                get {
                    return ((MunicipioRow)(this.Rows[index]));
                }
            }
            
            public event MunicipioRowChangeEventHandler MunicipioRowChanging;
            
            public event MunicipioRowChangeEventHandler MunicipioRowChanged;
            
            public event MunicipioRowChangeEventHandler MunicipioRowDeleting;
            
            public event MunicipioRowChangeEventHandler MunicipioRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMunicipioRow(MunicipioRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow AddMunicipioRow(long idMunicipio, string nombre_Municipio, ProvinciaRow parentProvinciaRowByFK__Municipio__idPro__060DEAE8) {
                MunicipioRow rowMunicipioRow = ((MunicipioRow)(this.NewRow()));
                rowMunicipioRow.ItemArray = new object[] {
                        idMunicipio,
                        nombre_Municipio,
                        parentProvinciaRowByFK__Municipio__idPro__060DEAE8[0]};
                this.Rows.Add(rowMunicipioRow);
                return rowMunicipioRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow FindByidMunicipio(long idMunicipio) {
                return ((MunicipioRow)(this.Rows.Find(new object[] {
                            idMunicipio})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MunicipioDataTable cln = ((MunicipioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MunicipioDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidMunicipio = base.Columns["idMunicipio"];
                this.columnnombre_Municipio = base.Columns["nombre_Municipio"];
                this.columnidProvincia = base.Columns["idProvincia"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidMunicipio = new System.Data.DataColumn("idMunicipio", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidMunicipio);
                this.columnnombre_Municipio = new System.Data.DataColumn("nombre_Municipio", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_Municipio);
                this.columnidProvincia = new System.Data.DataColumn("idProvincia", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidProvincia);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidMunicipio}, true));
                this.columnidMunicipio.AllowDBNull = false;
                this.columnidMunicipio.Unique = true;
                this.columnnombre_Municipio.AllowDBNull = false;
                this.columnnombre_Municipio.MaxLength = 70;
                this.columnidProvincia.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow NewMunicipioRow() {
                return ((MunicipioRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MunicipioRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MunicipioRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MunicipioRowChanged != null)) {
                    this.MunicipioRowChanged(this, new MunicipioRowChangeEvent(((MunicipioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MunicipioRowChanging != null)) {
                    this.MunicipioRowChanging(this, new MunicipioRowChangeEvent(((MunicipioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MunicipioRowDeleted != null)) {
                    this.MunicipioRowDeleted(this, new MunicipioRowChangeEvent(((MunicipioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MunicipioRowDeleting != null)) {
                    this.MunicipioRowDeleting(this, new MunicipioRowChangeEvent(((MunicipioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMunicipioRow(MunicipioRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MunicipioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProvinciaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidProvincia;
            
            private System.Data.DataColumn columnnombre_Provincia;
            
            private System.Data.DataColumn columnidDpto;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaDataTable() {
                this.TableName = "Provincia";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProvinciaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProvinciaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idProvinciaColumn {
                get {
                    return this.columnidProvincia;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_ProvinciaColumn {
                get {
                    return this.columnnombre_Provincia;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idDptoColumn {
                get {
                    return this.columnidDpto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow this[int index] {
                get {
                    return ((ProvinciaRow)(this.Rows[index]));
                }
            }
            
            public event ProvinciaRowChangeEventHandler ProvinciaRowChanging;
            
            public event ProvinciaRowChangeEventHandler ProvinciaRowChanged;
            
            public event ProvinciaRowChangeEventHandler ProvinciaRowDeleting;
            
            public event ProvinciaRowChangeEventHandler ProvinciaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProvinciaRow(ProvinciaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow AddProvinciaRow(long idProvincia, string nombre_Provincia, DptoRow parentDptoRowByFK__Provincia__idDpt__03317E3D) {
                ProvinciaRow rowProvinciaRow = ((ProvinciaRow)(this.NewRow()));
                rowProvinciaRow.ItemArray = new object[] {
                        idProvincia,
                        nombre_Provincia,
                        parentDptoRowByFK__Provincia__idDpt__03317E3D[0]};
                this.Rows.Add(rowProvinciaRow);
                return rowProvinciaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow FindByidProvincia(long idProvincia) {
                return ((ProvinciaRow)(this.Rows.Find(new object[] {
                            idProvincia})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProvinciaDataTable cln = ((ProvinciaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProvinciaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidProvincia = base.Columns["idProvincia"];
                this.columnnombre_Provincia = base.Columns["nombre_Provincia"];
                this.columnidDpto = base.Columns["idDpto"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidProvincia = new System.Data.DataColumn("idProvincia", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidProvincia);
                this.columnnombre_Provincia = new System.Data.DataColumn("nombre_Provincia", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_Provincia);
                this.columnidDpto = new System.Data.DataColumn("idDpto", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidDpto);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidProvincia}, true));
                this.columnidProvincia.AllowDBNull = false;
                this.columnidProvincia.Unique = true;
                this.columnnombre_Provincia.AllowDBNull = false;
                this.columnnombre_Provincia.MaxLength = 70;
                this.columnidDpto.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow NewProvinciaRow() {
                return ((ProvinciaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProvinciaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProvinciaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProvinciaRowChanged != null)) {
                    this.ProvinciaRowChanged(this, new ProvinciaRowChangeEvent(((ProvinciaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProvinciaRowChanging != null)) {
                    this.ProvinciaRowChanging(this, new ProvinciaRowChangeEvent(((ProvinciaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProvinciaRowDeleted != null)) {
                    this.ProvinciaRowDeleted(this, new ProvinciaRowChangeEvent(((ProvinciaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProvinciaRowDeleting != null)) {
                    this.ProvinciaRowDeleting(this, new ProvinciaRowChangeEvent(((ProvinciaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProvinciaRow(ProvinciaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProvinciaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RaizDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidArbol;
            
            private System.Data.DataColumn columnlongitud;
            
            private System.Data.DataColumn columndescripcion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizDataTable() {
                this.TableName = "Raiz";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RaizDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RaizDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idArbolColumn {
                get {
                    return this.columnidArbol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn longitudColumn {
                get {
                    return this.columnlongitud;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descripcionColumn {
                get {
                    return this.columndescripcion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow this[int index] {
                get {
                    return ((RaizRow)(this.Rows[index]));
                }
            }
            
            public event RaizRowChangeEventHandler RaizRowChanging;
            
            public event RaizRowChangeEventHandler RaizRowChanged;
            
            public event RaizRowChangeEventHandler RaizRowDeleting;
            
            public event RaizRowChangeEventHandler RaizRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRaizRow(RaizRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow AddRaizRow(ArbolRow parentArbolRowByFK__Raiz__idArbol__1CF15040, double longitud, string descripcion) {
                RaizRow rowRaizRow = ((RaizRow)(this.NewRow()));
                rowRaizRow.ItemArray = new object[] {
                        parentArbolRowByFK__Raiz__idArbol__1CF15040[0],
                        longitud,
                        descripcion};
                this.Rows.Add(rowRaizRow);
                return rowRaizRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow FindByidArbol(long idArbol) {
                return ((RaizRow)(this.Rows.Find(new object[] {
                            idArbol})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RaizDataTable cln = ((RaizDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RaizDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidArbol = base.Columns["idArbol"];
                this.columnlongitud = base.Columns["longitud"];
                this.columndescripcion = base.Columns["descripcion"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidArbol = new System.Data.DataColumn("idArbol", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidArbol);
                this.columnlongitud = new System.Data.DataColumn("longitud", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlongitud);
                this.columndescripcion = new System.Data.DataColumn("descripcion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescripcion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidArbol}, true));
                this.columnidArbol.AllowDBNull = false;
                this.columnidArbol.Unique = true;
                this.columndescripcion.AllowDBNull = false;
                this.columndescripcion.MaxLength = 70;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow NewRaizRow() {
                return ((RaizRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RaizRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RaizRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RaizRowChanged != null)) {
                    this.RaizRowChanged(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RaizRowChanging != null)) {
                    this.RaizRowChanging(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RaizRowDeleted != null)) {
                    this.RaizRowDeleted(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RaizRowDeleting != null)) {
                    this.RaizRowDeleting(this, new RaizRowChangeEvent(((RaizRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRaizRow(RaizRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RaizDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TalloDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidArbol;
            
            private System.Data.DataColumn columnlongitud;
            
            private System.Data.DataColumn columndiametro;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloDataTable() {
                this.TableName = "Tallo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TalloDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TalloDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idArbolColumn {
                get {
                    return this.columnidArbol;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn longitudColumn {
                get {
                    return this.columnlongitud;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn diametroColumn {
                get {
                    return this.columndiametro;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRow this[int index] {
                get {
                    return ((TalloRow)(this.Rows[index]));
                }
            }
            
            public event TalloRowChangeEventHandler TalloRowChanging;
            
            public event TalloRowChangeEventHandler TalloRowChanged;
            
            public event TalloRowChangeEventHandler TalloRowDeleting;
            
            public event TalloRowChangeEventHandler TalloRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTalloRow(TalloRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRow AddTalloRow(ArbolRow parentArbolRowByFK__Tallo__idArbol__173876EA, double longitud, double diametro) {
                TalloRow rowTalloRow = ((TalloRow)(this.NewRow()));
                rowTalloRow.ItemArray = new object[] {
                        parentArbolRowByFK__Tallo__idArbol__173876EA[0],
                        longitud,
                        diametro};
                this.Rows.Add(rowTalloRow);
                return rowTalloRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRow FindByidArbol(long idArbol) {
                return ((TalloRow)(this.Rows.Find(new object[] {
                            idArbol})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TalloDataTable cln = ((TalloDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TalloDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidArbol = base.Columns["idArbol"];
                this.columnlongitud = base.Columns["longitud"];
                this.columndiametro = base.Columns["diametro"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidArbol = new System.Data.DataColumn("idArbol", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidArbol);
                this.columnlongitud = new System.Data.DataColumn("longitud", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlongitud);
                this.columndiametro = new System.Data.DataColumn("diametro", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndiametro);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidArbol}, true));
                this.columnidArbol.AllowDBNull = false;
                this.columnidArbol.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRow NewTalloRow() {
                return ((TalloRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TalloRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TalloRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TalloRowChanged != null)) {
                    this.TalloRowChanged(this, new TalloRowChangeEvent(((TalloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TalloRowChanging != null)) {
                    this.TalloRowChanging(this, new TalloRowChangeEvent(((TalloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TalloRowDeleted != null)) {
                    this.TalloRowDeleted(this, new TalloRowChangeEvent(((TalloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TalloRowDeleting != null)) {
                    this.TalloRowDeleting(this, new TalloRowChangeEvent(((TalloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTalloRow(TalloRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TalloDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Tipo_SueloDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnidTipo_Suelo;
            
            private System.Data.DataColumn columnnombre_TipoSuelo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloDataTable() {
                this.TableName = "Tipo_Suelo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Tipo_SueloDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Tipo_SueloDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idTipo_SueloColumn {
                get {
                    return this.columnidTipo_Suelo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nombre_TipoSueloColumn {
                get {
                    return this.columnnombre_TipoSuelo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRow this[int index] {
                get {
                    return ((Tipo_SueloRow)(this.Rows[index]));
                }
            }
            
            public event Tipo_SueloRowChangeEventHandler Tipo_SueloRowChanging;
            
            public event Tipo_SueloRowChangeEventHandler Tipo_SueloRowChanged;
            
            public event Tipo_SueloRowChangeEventHandler Tipo_SueloRowDeleting;
            
            public event Tipo_SueloRowChangeEventHandler Tipo_SueloRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTipo_SueloRow(Tipo_SueloRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRow AddTipo_SueloRow(long idTipo_Suelo, string nombre_TipoSuelo) {
                Tipo_SueloRow rowTipo_SueloRow = ((Tipo_SueloRow)(this.NewRow()));
                rowTipo_SueloRow.ItemArray = new object[] {
                        idTipo_Suelo,
                        nombre_TipoSuelo};
                this.Rows.Add(rowTipo_SueloRow);
                return rowTipo_SueloRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRow FindByidTipo_Suelo(long idTipo_Suelo) {
                return ((Tipo_SueloRow)(this.Rows.Find(new object[] {
                            idTipo_Suelo})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Tipo_SueloDataTable cln = ((Tipo_SueloDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Tipo_SueloDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidTipo_Suelo = base.Columns["idTipo_Suelo"];
                this.columnnombre_TipoSuelo = base.Columns["nombre_TipoSuelo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidTipo_Suelo = new System.Data.DataColumn("idTipo_Suelo", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidTipo_Suelo);
                this.columnnombre_TipoSuelo = new System.Data.DataColumn("nombre_TipoSuelo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnombre_TipoSuelo);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnidTipo_Suelo}, true));
                this.columnidTipo_Suelo.AllowDBNull = false;
                this.columnidTipo_Suelo.Unique = true;
                this.columnnombre_TipoSuelo.AllowDBNull = false;
                this.columnnombre_TipoSuelo.MaxLength = 70;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRow NewTipo_SueloRow() {
                return ((Tipo_SueloRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Tipo_SueloRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Tipo_SueloRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Tipo_SueloRowChanged != null)) {
                    this.Tipo_SueloRowChanged(this, new Tipo_SueloRowChangeEvent(((Tipo_SueloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Tipo_SueloRowChanging != null)) {
                    this.Tipo_SueloRowChanging(this, new Tipo_SueloRowChangeEvent(((Tipo_SueloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Tipo_SueloRowDeleted != null)) {
                    this.Tipo_SueloRowDeleted(this, new Tipo_SueloRowChangeEvent(((Tipo_SueloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Tipo_SueloRowDeleting != null)) {
                    this.Tipo_SueloRowDeleting(this, new Tipo_SueloRowChangeEvent(((Tipo_SueloRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTipo_SueloRow(Tipo_SueloRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Tipo_SueloDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ArbolRow : System.Data.DataRow {
            
            private ArbolDataTable tableArbol;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArbolRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArbol = ((ArbolDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idArbol {
                get {
                    return ((long)(this[this.tableArbol.idArbolColumn]));
                }
                set {
                    this[this.tableArbol.idArbolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_Arbol {
                get {
                    return ((string)(this[this.tableArbol.nombre_ArbolColumn]));
                }
                set {
                    this[this.tableArbol.nombre_ArbolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double edad {
                get {
                    try {
                        return ((double)(this[this.tableArbol.edadColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'edad\' in table \'Arbol\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArbol.edadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ancho {
                get {
                    try {
                        return ((double)(this[this.tableArbol.anchoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ancho\' in table \'Arbol\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableArbol.anchoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idEspecie {
                get {
                    return ((long)(this[this.tableArbol.idEspecieColumn]));
                }
                set {
                    this[this.tableArbol.idEspecieColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idBosque {
                get {
                    return ((long)(this[this.tableArbol.idBosqueColumn]));
                }
                set {
                    this[this.tableArbol.idBosqueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow BosqueRow {
                get {
                    return ((BosqueRow)(this.GetParentRow(this.Table.ParentRelations["FK__Arbol__idBosque__145C0A3F"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Arbol__idBosque__145C0A3F"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRow EspecieRow {
                get {
                    return ((EspecieRow)(this.GetParentRow(this.Table.ParentRelations["FK__Arbol__idEspecie__1367E606"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Arbol__idEspecie__1367E606"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsedadNull() {
                return this.IsNull(this.tableArbol.edadColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetedadNull() {
                this[this.tableArbol.edadColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsanchoNull() {
                return this.IsNull(this.tableArbol.anchoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetanchoNull() {
                this[this.tableArbol.anchoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRow[] GetHojaRows() {
                return ((HojaRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Hoja__idArbol__1A14E395"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow[] GetRaizRows() {
                return ((RaizRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Raiz__idArbol__1CF15040"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRow[] GetTalloRows() {
                return ((TalloRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Tallo__idArbol__173876EA"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BosqueRow : System.Data.DataRow {
            
            private BosqueDataTable tableBosque;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BosqueRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBosque = ((BosqueDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idBosque {
                get {
                    return ((long)(this[this.tableBosque.idBosqueColumn]));
                }
                set {
                    this[this.tableBosque.idBosqueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double hectaria {
                get {
                    return ((double)(this[this.tableBosque.hectariaColumn]));
                }
                set {
                    this[this.tableBosque.hectariaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idTipo_Suelo {
                get {
                    return ((long)(this[this.tableBosque.idTipo_SueloColumn]));
                }
                set {
                    this[this.tableBosque.idTipo_SueloColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idMunicipio {
                get {
                    return ((long)(this[this.tableBosque.idMunicipioColumn]));
                }
                set {
                    this[this.tableBosque.idMunicipioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow MunicipioRow {
                get {
                    return ((MunicipioRow)(this.GetParentRow(this.Table.ParentRelations["FK__Bosque__idMunici__09DE7BCC"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Bosque__idMunici__09DE7BCC"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRow Tipo_SueloRow {
                get {
                    return ((Tipo_SueloRow)(this.GetParentRow(this.Table.ParentRelations["FK__Bosque__idTipo_S__08EA5793"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Bosque__idTipo_S__08EA5793"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow[] GetArbolRows() {
                return ((ArbolRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Arbol__idBosque__145C0A3F"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DptoRow : System.Data.DataRow {
            
            private DptoDataTable tableDpto;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DptoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDpto = ((DptoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idDpto {
                get {
                    return ((long)(this[this.tableDpto.idDptoColumn]));
                }
                set {
                    this[this.tableDpto.idDptoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_Dpto {
                get {
                    return ((string)(this[this.tableDpto.nombre_DptoColumn]));
                }
                set {
                    this[this.tableDpto.nombre_DptoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow[] GetProvinciaRows() {
                return ((ProvinciaRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Provincia__idDpt__03317E3D"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EspecieRow : System.Data.DataRow {
            
            private EspecieDataTable tableEspecie;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EspecieRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEspecie = ((EspecieDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idEspecie {
                get {
                    return ((long)(this[this.tableEspecie.idEspecieColumn]));
                }
                set {
                    this[this.tableEspecie.idEspecieColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_Especie {
                get {
                    return ((string)(this[this.tableEspecie.nombre_EspecieColumn]));
                }
                set {
                    this[this.tableEspecie.nombre_EspecieColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_Comun {
                get {
                    return ((string)(this[this.tableEspecie.nombre_ComunColumn]));
                }
                set {
                    this[this.tableEspecie.nombre_ComunColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow[] GetArbolRows() {
                return ((ArbolRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Arbol__idEspecie__1367E606"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HojaRow : System.Data.DataRow {
            
            private HojaDataTable tableHoja;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HojaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHoja = ((HojaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idArbol {
                get {
                    return ((long)(this[this.tableHoja.idArbolColumn]));
                }
                set {
                    this[this.tableHoja.idArbolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string forma {
                get {
                    return ((string)(this[this.tableHoja.formaColumn]));
                }
                set {
                    this[this.tableHoja.formaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string color {
                get {
                    return ((string)(this[this.tableHoja.colorColumn]));
                }
                set {
                    this[this.tableHoja.colorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow ArbolRow {
                get {
                    return ((ArbolRow)(this.GetParentRow(this.Table.ParentRelations["FK__Hoja__idArbol__1A14E395"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Hoja__idArbol__1A14E395"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MunicipioRow : System.Data.DataRow {
            
            private MunicipioDataTable tableMunicipio;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MunicipioRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMunicipio = ((MunicipioDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idMunicipio {
                get {
                    return ((long)(this[this.tableMunicipio.idMunicipioColumn]));
                }
                set {
                    this[this.tableMunicipio.idMunicipioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_Municipio {
                get {
                    return ((string)(this[this.tableMunicipio.nombre_MunicipioColumn]));
                }
                set {
                    this[this.tableMunicipio.nombre_MunicipioColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idProvincia {
                get {
                    return ((long)(this[this.tableMunicipio.idProvinciaColumn]));
                }
                set {
                    this[this.tableMunicipio.idProvinciaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow ProvinciaRow {
                get {
                    return ((ProvinciaRow)(this.GetParentRow(this.Table.ParentRelations["FK__Municipio__idPro__060DEAE8"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Municipio__idPro__060DEAE8"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow[] GetBosqueRows() {
                return ((BosqueRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Bosque__idMunici__09DE7BCC"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProvinciaRow : System.Data.DataRow {
            
            private ProvinciaDataTable tableProvincia;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProvinciaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProvincia = ((ProvinciaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idProvincia {
                get {
                    return ((long)(this[this.tableProvincia.idProvinciaColumn]));
                }
                set {
                    this[this.tableProvincia.idProvinciaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_Provincia {
                get {
                    return ((string)(this[this.tableProvincia.nombre_ProvinciaColumn]));
                }
                set {
                    this[this.tableProvincia.nombre_ProvinciaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idDpto {
                get {
                    return ((long)(this[this.tableProvincia.idDptoColumn]));
                }
                set {
                    this[this.tableProvincia.idDptoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRow DptoRow {
                get {
                    return ((DptoRow)(this.GetParentRow(this.Table.ParentRelations["FK__Provincia__idDpt__03317E3D"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Provincia__idDpt__03317E3D"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow[] GetMunicipioRows() {
                return ((MunicipioRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Municipio__idPro__060DEAE8"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RaizRow : System.Data.DataRow {
            
            private RaizDataTable tableRaiz;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RaizRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRaiz = ((RaizDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idArbol {
                get {
                    return ((long)(this[this.tableRaiz.idArbolColumn]));
                }
                set {
                    this[this.tableRaiz.idArbolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double longitud {
                get {
                    try {
                        return ((double)(this[this.tableRaiz.longitudColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'longitud\' in table \'Raiz\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRaiz.longitudColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descripcion {
                get {
                    return ((string)(this[this.tableRaiz.descripcionColumn]));
                }
                set {
                    this[this.tableRaiz.descripcionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow ArbolRow {
                get {
                    return ((ArbolRow)(this.GetParentRow(this.Table.ParentRelations["FK__Raiz__idArbol__1CF15040"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Raiz__idArbol__1CF15040"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslongitudNull() {
                return this.IsNull(this.tableRaiz.longitudColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlongitudNull() {
                this[this.tableRaiz.longitudColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TalloRow : System.Data.DataRow {
            
            private TalloDataTable tableTallo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TalloRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTallo = ((TalloDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idArbol {
                get {
                    return ((long)(this[this.tableTallo.idArbolColumn]));
                }
                set {
                    this[this.tableTallo.idArbolColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double longitud {
                get {
                    try {
                        return ((double)(this[this.tableTallo.longitudColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'longitud\' in table \'Tallo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTallo.longitudColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double diametro {
                get {
                    try {
                        return ((double)(this[this.tableTallo.diametroColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'diametro\' in table \'Tallo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTallo.diametroColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow ArbolRow {
                get {
                    return ((ArbolRow)(this.GetParentRow(this.Table.ParentRelations["FK__Tallo__idArbol__173876EA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__Tallo__idArbol__173876EA"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslongitudNull() {
                return this.IsNull(this.tableTallo.longitudColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlongitudNull() {
                this[this.tableTallo.longitudColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiametroNull() {
                return this.IsNull(this.tableTallo.diametroColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiametroNull() {
                this[this.tableTallo.diametroColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Tipo_SueloRow : System.Data.DataRow {
            
            private Tipo_SueloDataTable tableTipo_Suelo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Tipo_SueloRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTipo_Suelo = ((Tipo_SueloDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long idTipo_Suelo {
                get {
                    return ((long)(this[this.tableTipo_Suelo.idTipo_SueloColumn]));
                }
                set {
                    this[this.tableTipo_Suelo.idTipo_SueloColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nombre_TipoSuelo {
                get {
                    return ((string)(this[this.tableTipo_Suelo.nombre_TipoSueloColumn]));
                }
                set {
                    this[this.tableTipo_Suelo.nombre_TipoSueloColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow[] GetBosqueRows() {
                return ((BosqueRow[])(base.GetChildRows(this.Table.ChildRelations["FK__Bosque__idTipo_S__08EA5793"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ArbolRowChangeEvent : System.EventArgs {
            
            private ArbolRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRowChangeEvent(ArbolRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArbolRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BosqueRowChangeEvent : System.EventArgs {
            
            private BosqueRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRowChangeEvent(BosqueRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BosqueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DptoRowChangeEvent : System.EventArgs {
            
            private DptoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRowChangeEvent(DptoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DptoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EspecieRowChangeEvent : System.EventArgs {
            
            private EspecieRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRowChangeEvent(EspecieRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EspecieRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HojaRowChangeEvent : System.EventArgs {
            
            private HojaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRowChangeEvent(HojaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HojaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MunicipioRowChangeEvent : System.EventArgs {
            
            private MunicipioRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRowChangeEvent(MunicipioRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MunicipioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProvinciaRowChangeEvent : System.EventArgs {
            
            private ProvinciaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRowChangeEvent(ProvinciaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProvinciaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RaizRowChangeEvent : System.EventArgs {
            
            private RaizRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRowChangeEvent(RaizRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RaizRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TalloRowChangeEvent : System.EventArgs {
            
            private TalloRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRowChangeEvent(TalloRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TalloRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Tipo_SueloRowChangeEvent : System.EventArgs {
            
            private Tipo_SueloRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRowChangeEvent(Tipo_SueloRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Tipo_SueloRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Reportes.DataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ArbolTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArbolTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Arbol";
            tableMapping.ColumnMappings.Add("idArbol", "idArbol");
            tableMapping.ColumnMappings.Add("nombre_Arbol", "nombre_Arbol");
            tableMapping.ColumnMappings.Add("edad", "edad");
            tableMapping.ColumnMappings.Add("ancho", "ancho");
            tableMapping.ColumnMappings.Add("idEspecie", "idEspecie");
            tableMapping.ColumnMappings.Add("idBosque", "idBosque");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Arbol] WHERE (([idArbol] = @Original_idArbol) AND ([nombre_Arbol] = @Original_nombre_Arbol) AND ((@IsNull_edad = 1 AND [edad] IS NULL) OR ([edad] = @Original_edad)) AND ((@IsNull_ancho = 1 AND [ancho] IS NULL) OR ([ancho] = @Original_ancho)) AND ([idEspecie] = @Original_idEspecie) AND ([idBosque] = @Original_idBosque))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Arbol", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Arbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_edad", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "edad", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_edad", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "edad", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ancho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ancho", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ancho", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "ancho", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Arbol] ([idArbol], [nombre_Arbol], [edad], [ancho], [idEspecie], [idBosque]) VALUES (@idArbol, @nombre_Arbol, @edad, @ancho, @idEspecie, @idBosque);
SELECT idArbol, nombre_Arbol, edad, ancho, idEspecie, idBosque FROM Arbol WHERE (idArbol = @idArbol)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Arbol", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Arbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@edad", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "edad", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ancho", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "ancho", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Arbol] SET [idArbol] = @idArbol, [nombre_Arbol] = @nombre_Arbol, [edad] = @edad, [ancho] = @ancho, [idEspecie] = @idEspecie, [idBosque] = @idBosque WHERE (([idArbol] = @Original_idArbol) AND ([nombre_Arbol] = @Original_nombre_Arbol) AND ((@IsNull_edad = 1 AND [edad] IS NULL) OR ([edad] = @Original_edad)) AND ((@IsNull_ancho = 1 AND [ancho] IS NULL) OR ([ancho] = @Original_ancho)) AND ([idEspecie] = @Original_idEspecie) AND ([idBosque] = @Original_idBosque));
SELECT idArbol, nombre_Arbol, edad, ancho, idEspecie, idBosque FROM Arbol WHERE (idArbol = @idArbol)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Arbol", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Arbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@edad", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "edad", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ancho", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "ancho", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Arbol", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Arbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_edad", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "edad", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_edad", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "edad", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ancho", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ancho", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ancho", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "ancho", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idArbol, nombre_Arbol, edad, ancho, idEspecie, idBosque FROM dbo.Arbol";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ArbolDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.ArbolDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.ArbolDataTable dataTable = new DataSet1.ArbolDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.ArbolDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Arbol");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idArbol, string Original_nombre_Arbol, System.Nullable<double> Original_edad, System.Nullable<double> Original_ancho, long Original_idEspecie, long Original_idBosque) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idArbol));
            if ((Original_nombre_Arbol == null)) {
                throw new System.ArgumentNullException("Original_nombre_Arbol");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nombre_Arbol));
            }
            if ((Original_edad.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_edad.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_ancho.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_ancho.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_idEspecie));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_idBosque));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idArbol, string nombre_Arbol, System.Nullable<double> edad, System.Nullable<double> ancho, long idEspecie, long idBosque) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idArbol));
            if ((nombre_Arbol == null)) {
                throw new System.ArgumentNullException("nombre_Arbol");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nombre_Arbol));
            }
            if ((edad.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(edad.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((ancho.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(ancho.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(idEspecie));
            this.Adapter.InsertCommand.Parameters[5].Value = ((long)(idBosque));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idArbol, string nombre_Arbol, System.Nullable<double> edad, System.Nullable<double> ancho, long idEspecie, long idBosque, long Original_idArbol, string Original_nombre_Arbol, System.Nullable<double> Original_edad, System.Nullable<double> Original_ancho, long Original_idEspecie, long Original_idBosque) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idArbol));
            if ((nombre_Arbol == null)) {
                throw new System.ArgumentNullException("nombre_Arbol");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nombre_Arbol));
            }
            if ((edad.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(edad.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((ancho.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(ancho.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(idEspecie));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(idBosque));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_idArbol));
            if ((Original_nombre_Arbol == null)) {
                throw new System.ArgumentNullException("Original_nombre_Arbol");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_nombre_Arbol));
            }
            if ((Original_edad.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Original_edad.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Original_ancho.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(Original_ancho.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_idEspecie));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_idBosque));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BosqueTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BosqueTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Bosque";
            tableMapping.ColumnMappings.Add("idBosque", "idBosque");
            tableMapping.ColumnMappings.Add("hectaria", "hectaria");
            tableMapping.ColumnMappings.Add("idTipo_Suelo", "idTipo_Suelo");
            tableMapping.ColumnMappings.Add("idMunicipio", "idMunicipio");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Bosque] WHERE (([idBosque] = @Original_idBosque) AND ([hectari" +
                "a] = @Original_hectaria) AND ([idTipo_Suelo] = @Original_idTipo_Suelo) AND ([idM" +
                "unicipio] = @Original_idMunicipio))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hectaria", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "hectaria", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Bosque] ([idBosque], [hectaria], [idTipo_Suelo], [idMunicipio]" +
                ") VALUES (@idBosque, @hectaria, @idTipo_Suelo, @idMunicipio);\r\nSELECT idBosque, " +
                "hectaria, idTipo_Suelo, idMunicipio FROM Bosque WHERE (idBosque = @idBosque)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hectaria", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "hectaria", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Bosque] SET [idBosque] = @idBosque, [hectaria] = @hectaria, [idTipo_Suelo] = @idTipo_Suelo, [idMunicipio] = @idMunicipio WHERE (([idBosque] = @Original_idBosque) AND ([hectaria] = @Original_hectaria) AND ([idTipo_Suelo] = @Original_idTipo_Suelo) AND ([idMunicipio] = @Original_idMunicipio));
SELECT idBosque, hectaria, idTipo_Suelo, idMunicipio FROM Bosque WHERE (idBosque = @idBosque)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@hectaria", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "hectaria", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idBosque", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idBosque", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_hectaria", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "hectaria", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idBosque, hectaria, idTipo_Suelo, idMunicipio FROM dbo.Bosque";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.BosqueDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.BosqueDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.BosqueDataTable dataTable = new DataSet1.BosqueDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.BosqueDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Bosque");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idBosque, double Original_hectaria, long Original_idTipo_Suelo, long Original_idMunicipio) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idBosque));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((double)(Original_hectaria));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_idTipo_Suelo));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_idMunicipio));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idBosque, double hectaria, long idTipo_Suelo, long idMunicipio) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idBosque));
            this.Adapter.InsertCommand.Parameters[1].Value = ((double)(hectaria));
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(idTipo_Suelo));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(idMunicipio));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idBosque, double hectaria, long idTipo_Suelo, long idMunicipio, long Original_idBosque, double Original_hectaria, long Original_idTipo_Suelo, long Original_idMunicipio) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idBosque));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(hectaria));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(idTipo_Suelo));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(idMunicipio));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(Original_idBosque));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Original_hectaria));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_idTipo_Suelo));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_idMunicipio));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DptoTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DptoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Dpto";
            tableMapping.ColumnMappings.Add("idDpto", "idDpto");
            tableMapping.ColumnMappings.Add("nombre_Dpto", "nombre_Dpto");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Dpto] WHERE (([idDpto] = @Original_idDpto) AND ([nombre_Dpto] " +
                "= @Original_nombre_Dpto))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Dpto", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Dpto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Dpto] ([idDpto], [nombre_Dpto]) VALUES (@idDpto, @nombre_Dpto)" +
                ";\r\nSELECT idDpto, nombre_Dpto FROM Dpto WHERE (idDpto = @idDpto)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Dpto", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Dpto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Dpto] SET [idDpto] = @idDpto, [nombre_Dpto] = @nombre_Dpto WHERE ((" +
                "[idDpto] = @Original_idDpto) AND ([nombre_Dpto] = @Original_nombre_Dpto));\r\nSELE" +
                "CT idDpto, nombre_Dpto FROM Dpto WHERE (idDpto = @idDpto)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Dpto", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Dpto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Dpto", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Dpto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idDpto, nombre_Dpto FROM dbo.Dpto";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.DptoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.DptoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.DptoDataTable dataTable = new DataSet1.DptoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.DptoDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Dpto");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idDpto, string Original_nombre_Dpto) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idDpto));
            if ((Original_nombre_Dpto == null)) {
                throw new System.ArgumentNullException("Original_nombre_Dpto");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nombre_Dpto));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idDpto, string nombre_Dpto) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idDpto));
            if ((nombre_Dpto == null)) {
                throw new System.ArgumentNullException("nombre_Dpto");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nombre_Dpto));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idDpto, string nombre_Dpto, long Original_idDpto, string Original_nombre_Dpto) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idDpto));
            if ((nombre_Dpto == null)) {
                throw new System.ArgumentNullException("nombre_Dpto");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nombre_Dpto));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Original_idDpto));
            if ((Original_nombre_Dpto == null)) {
                throw new System.ArgumentNullException("Original_nombre_Dpto");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_nombre_Dpto));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EspecieTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EspecieTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Especie";
            tableMapping.ColumnMappings.Add("idEspecie", "idEspecie");
            tableMapping.ColumnMappings.Add("nombre_Especie", "nombre_Especie");
            tableMapping.ColumnMappings.Add("nombre_Comun", "nombre_Comun");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Especie] WHERE (([idEspecie] = @Original_idEspecie) AND ([nomb" +
                "re_Especie] = @Original_nombre_Especie) AND ([nombre_Comun] = @Original_nombre_C" +
                "omun))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Especie", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Especie", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Comun", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Comun", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Especie] ([idEspecie], [nombre_Especie], [nombre_Comun]) VALUE" +
                "S (@idEspecie, @nombre_Especie, @nombre_Comun);\r\nSELECT idEspecie, nombre_Especi" +
                "e, nombre_Comun FROM Especie WHERE (idEspecie = @idEspecie)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Especie", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Especie", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Comun", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Comun", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Especie] SET [idEspecie] = @idEspecie, [nombre_Especie] = @nombre_Especie, [nombre_Comun] = @nombre_Comun WHERE (([idEspecie] = @Original_idEspecie) AND ([nombre_Especie] = @Original_nombre_Especie) AND ([nombre_Comun] = @Original_nombre_Comun));
SELECT idEspecie, nombre_Especie, nombre_Comun FROM Especie WHERE (idEspecie = @idEspecie)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Especie", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Especie", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Comun", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Comun", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idEspecie", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idEspecie", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Especie", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Especie", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Comun", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Comun", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idEspecie, nombre_Especie, nombre_Comun FROM dbo.Especie";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.EspecieDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.EspecieDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.EspecieDataTable dataTable = new DataSet1.EspecieDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.EspecieDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Especie");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idEspecie, string Original_nombre_Especie, string Original_nombre_Comun) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idEspecie));
            if ((Original_nombre_Especie == null)) {
                throw new System.ArgumentNullException("Original_nombre_Especie");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nombre_Especie));
            }
            if ((Original_nombre_Comun == null)) {
                throw new System.ArgumentNullException("Original_nombre_Comun");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_nombre_Comun));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idEspecie, string nombre_Especie, string nombre_Comun) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idEspecie));
            if ((nombre_Especie == null)) {
                throw new System.ArgumentNullException("nombre_Especie");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nombre_Especie));
            }
            if ((nombre_Comun == null)) {
                throw new System.ArgumentNullException("nombre_Comun");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(nombre_Comun));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idEspecie, string nombre_Especie, string nombre_Comun, long Original_idEspecie, string Original_nombre_Especie, string Original_nombre_Comun) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idEspecie));
            if ((nombre_Especie == null)) {
                throw new System.ArgumentNullException("nombre_Especie");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nombre_Especie));
            }
            if ((nombre_Comun == null)) {
                throw new System.ArgumentNullException("nombre_Comun");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(nombre_Comun));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_idEspecie));
            if ((Original_nombre_Especie == null)) {
                throw new System.ArgumentNullException("Original_nombre_Especie");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_nombre_Especie));
            }
            if ((Original_nombre_Comun == null)) {
                throw new System.ArgumentNullException("Original_nombre_Comun");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_nombre_Comun));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HojaTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HojaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Hoja";
            tableMapping.ColumnMappings.Add("idArbol", "idArbol");
            tableMapping.ColumnMappings.Add("forma", "forma");
            tableMapping.ColumnMappings.Add("color", "color");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Hoja] WHERE (([idArbol] = @Original_idArbol) AND ([forma] = @O" +
                "riginal_forma) AND ([color] = @Original_color))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_forma", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "forma", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Hoja] ([idArbol], [forma], [color]) VALUES (@idArbol, @forma, " +
                "@color);\r\nSELECT idArbol, forma, color FROM Hoja WHERE (idArbol = @idArbol)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@forma", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "forma", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Hoja] SET [idArbol] = @idArbol, [forma] = @forma, [color] = @color " +
                "WHERE (([idArbol] = @Original_idArbol) AND ([forma] = @Original_forma) AND ([col" +
                "or] = @Original_color));\r\nSELECT idArbol, forma, color FROM Hoja WHERE (idArbol " +
                "= @idArbol)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@forma", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "forma", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_forma", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "forma", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idArbol, forma, color FROM dbo.Hoja";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.HojaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.HojaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.HojaDataTable dataTable = new DataSet1.HojaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.HojaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Hoja");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idArbol, string Original_forma, string Original_color) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idArbol));
            if ((Original_forma == null)) {
                throw new System.ArgumentNullException("Original_forma");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_forma));
            }
            if ((Original_color == null)) {
                throw new System.ArgumentNullException("Original_color");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_color));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idArbol, string forma, string color) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idArbol));
            if ((forma == null)) {
                throw new System.ArgumentNullException("forma");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(forma));
            }
            if ((color == null)) {
                throw new System.ArgumentNullException("color");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(color));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idArbol, string forma, string color, long Original_idArbol, string Original_forma, string Original_color) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idArbol));
            if ((forma == null)) {
                throw new System.ArgumentNullException("forma");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(forma));
            }
            if ((color == null)) {
                throw new System.ArgumentNullException("color");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(color));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_idArbol));
            if ((Original_forma == null)) {
                throw new System.ArgumentNullException("Original_forma");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_forma));
            }
            if ((Original_color == null)) {
                throw new System.ArgumentNullException("Original_color");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_color));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MunicipioTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MunicipioTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Municipio";
            tableMapping.ColumnMappings.Add("idMunicipio", "idMunicipio");
            tableMapping.ColumnMappings.Add("nombre_Municipio", "nombre_Municipio");
            tableMapping.ColumnMappings.Add("idProvincia", "idProvincia");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Municipio] WHERE (([idMunicipio] = @Original_idMunicipio) AND " +
                "([nombre_Municipio] = @Original_nombre_Municipio) AND ([idProvincia] = @Original" +
                "_idProvincia))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Municipio", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Municipio", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Municipio] ([idMunicipio], [nombre_Municipio], [idProvincia]) " +
                "VALUES (@idMunicipio, @nombre_Municipio, @idProvincia);\r\nSELECT idMunicipio, nom" +
                "bre_Municipio, idProvincia FROM Municipio WHERE (idMunicipio = @idMunicipio)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Municipio", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Municipio", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Municipio] SET [idMunicipio] = @idMunicipio, [nombre_Municipio] = @nombre_Municipio, [idProvincia] = @idProvincia WHERE (([idMunicipio] = @Original_idMunicipio) AND ([nombre_Municipio] = @Original_nombre_Municipio) AND ([idProvincia] = @Original_idProvincia));
SELECT idMunicipio, nombre_Municipio, idProvincia FROM Municipio WHERE (idMunicipio = @idMunicipio)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Municipio", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Municipio", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idMunicipio", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idMunicipio", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Municipio", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Municipio", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idMunicipio, nombre_Municipio, idProvincia FROM dbo.Municipio";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.MunicipioDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.MunicipioDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.MunicipioDataTable dataTable = new DataSet1.MunicipioDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.MunicipioDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Municipio");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idMunicipio, string Original_nombre_Municipio, long Original_idProvincia) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idMunicipio));
            if ((Original_nombre_Municipio == null)) {
                throw new System.ArgumentNullException("Original_nombre_Municipio");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nombre_Municipio));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_idProvincia));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idMunicipio, string nombre_Municipio, long idProvincia) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idMunicipio));
            if ((nombre_Municipio == null)) {
                throw new System.ArgumentNullException("nombre_Municipio");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nombre_Municipio));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(idProvincia));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idMunicipio, string nombre_Municipio, long idProvincia, long Original_idMunicipio, string Original_nombre_Municipio, long Original_idProvincia) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idMunicipio));
            if ((nombre_Municipio == null)) {
                throw new System.ArgumentNullException("nombre_Municipio");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nombre_Municipio));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(idProvincia));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_idMunicipio));
            if ((Original_nombre_Municipio == null)) {
                throw new System.ArgumentNullException("Original_nombre_Municipio");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_nombre_Municipio));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_idProvincia));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProvinciaTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProvinciaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Provincia";
            tableMapping.ColumnMappings.Add("idProvincia", "idProvincia");
            tableMapping.ColumnMappings.Add("nombre_Provincia", "nombre_Provincia");
            tableMapping.ColumnMappings.Add("idDpto", "idDpto");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Provincia] WHERE (([idProvincia] = @Original_idProvincia) AND " +
                "([nombre_Provincia] = @Original_nombre_Provincia) AND ([idDpto] = @Original_idDp" +
                "to))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Provincia", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Provincia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Provincia] ([idProvincia], [nombre_Provincia], [idDpto]) VALUE" +
                "S (@idProvincia, @nombre_Provincia, @idDpto);\r\nSELECT idProvincia, nombre_Provin" +
                "cia, idDpto FROM Provincia WHERE (idProvincia = @idProvincia)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Provincia", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Provincia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Provincia] SET [idProvincia] = @idProvincia, [nombre_Provincia] = @nombre_Provincia, [idDpto] = @idDpto WHERE (([idProvincia] = @Original_idProvincia) AND ([nombre_Provincia] = @Original_nombre_Provincia) AND ([idDpto] = @Original_idDpto));
SELECT idProvincia, nombre_Provincia, idDpto FROM Provincia WHERE (idProvincia = @idProvincia)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_Provincia", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Provincia", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idProvincia", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idProvincia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_Provincia", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_Provincia", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idDpto", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idDpto", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idProvincia, nombre_Provincia, idDpto FROM dbo.Provincia";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ProvinciaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.ProvinciaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.ProvinciaDataTable dataTable = new DataSet1.ProvinciaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.ProvinciaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Provincia");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idProvincia, string Original_nombre_Provincia, long Original_idDpto) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idProvincia));
            if ((Original_nombre_Provincia == null)) {
                throw new System.ArgumentNullException("Original_nombre_Provincia");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nombre_Provincia));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_idDpto));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idProvincia, string nombre_Provincia, long idDpto) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idProvincia));
            if ((nombre_Provincia == null)) {
                throw new System.ArgumentNullException("nombre_Provincia");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nombre_Provincia));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(idDpto));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idProvincia, string nombre_Provincia, long idDpto, long Original_idProvincia, string Original_nombre_Provincia, long Original_idDpto) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idProvincia));
            if ((nombre_Provincia == null)) {
                throw new System.ArgumentNullException("nombre_Provincia");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nombre_Provincia));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(idDpto));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_idProvincia));
            if ((Original_nombre_Provincia == null)) {
                throw new System.ArgumentNullException("Original_nombre_Provincia");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_nombre_Provincia));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_idDpto));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RaizTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RaizTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Raiz";
            tableMapping.ColumnMappings.Add("idArbol", "idArbol");
            tableMapping.ColumnMappings.Add("longitud", "longitud");
            tableMapping.ColumnMappings.Add("descripcion", "descripcion");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Raiz] WHERE (([idArbol] = @Original_idArbol) AND ((@IsNull_lon" +
                "gitud = 1 AND [longitud] IS NULL) OR ([longitud] = @Original_longitud)) AND ([de" +
                "scripcion] = @Original_descripcion))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_longitud", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Raiz] ([idArbol], [longitud], [descripcion]) VALUES (@idArbol," +
                " @longitud, @descripcion);\r\nSELECT idArbol, longitud, descripcion FROM Raiz WHER" +
                "E (idArbol = @idArbol)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Raiz] SET [idArbol] = @idArbol, [longitud] = @longitud, [descripcion] = @descripcion WHERE (([idArbol] = @Original_idArbol) AND ((@IsNull_longitud = 1 AND [longitud] IS NULL) OR ([longitud] = @Original_longitud)) AND ([descripcion] = @Original_descripcion));
SELECT idArbol, longitud, descripcion FROM Raiz WHERE (idArbol = @idArbol)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_longitud", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idArbol, longitud, descripcion FROM dbo.Raiz";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.RaizDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.RaizDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.RaizDataTable dataTable = new DataSet1.RaizDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.RaizDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Raiz");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idArbol, System.Nullable<double> Original_longitud, string Original_descripcion) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idArbol));
            if ((Original_longitud.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_longitud.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_descripcion == null)) {
                throw new System.ArgumentNullException("Original_descripcion");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_descripcion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idArbol, System.Nullable<double> longitud, string descripcion) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idArbol));
            if ((longitud.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(longitud.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((descripcion == null)) {
                throw new System.ArgumentNullException("descripcion");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(descripcion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idArbol, System.Nullable<double> longitud, string descripcion, long Original_idArbol, System.Nullable<double> Original_longitud, string Original_descripcion) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idArbol));
            if ((longitud.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(longitud.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((descripcion == null)) {
                throw new System.ArgumentNullException("descripcion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(descripcion));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_idArbol));
            if ((Original_longitud.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Original_longitud.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_descripcion == null)) {
                throw new System.ArgumentNullException("Original_descripcion");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_descripcion));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TalloTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TalloTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Tallo";
            tableMapping.ColumnMappings.Add("idArbol", "idArbol");
            tableMapping.ColumnMappings.Add("longitud", "longitud");
            tableMapping.ColumnMappings.Add("diametro", "diametro");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tallo] WHERE (([idArbol] = @Original_idArbol) AND ((@IsNull_lo" +
                "ngitud = 1 AND [longitud] IS NULL) OR ([longitud] = @Original_longitud)) AND ((@" +
                "IsNull_diametro = 1 AND [diametro] IS NULL) OR ([diametro] = @Original_diametro)" +
                "))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_longitud", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_diametro", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diametro", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_diametro", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "diametro", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tallo] ([idArbol], [longitud], [diametro]) VALUES (@idArbol, @" +
                "longitud, @diametro);\r\nSELECT idArbol, longitud, diametro FROM Tallo WHERE (idAr" +
                "bol = @idArbol)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@diametro", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "diametro", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Tallo] SET [idArbol] = @idArbol, [longitud] = @longitud, [diametro] = @diametro WHERE (([idArbol] = @Original_idArbol) AND ((@IsNull_longitud = 1 AND [longitud] IS NULL) OR ([longitud] = @Original_longitud)) AND ((@IsNull_diametro = 1 AND [diametro] IS NULL) OR ([diametro] = @Original_diametro)));
SELECT idArbol, longitud, diametro FROM Tallo WHERE (idArbol = @idArbol)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@diametro", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "diametro", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idArbol", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idArbol", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_longitud", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_longitud", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "longitud", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_diametro", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "diametro", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_diametro", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "diametro", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idArbol, longitud, diametro FROM dbo.Tallo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.TalloDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.TalloDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.TalloDataTable dataTable = new DataSet1.TalloDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.TalloDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Tallo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idArbol, System.Nullable<double> Original_longitud, System.Nullable<double> Original_diametro) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idArbol));
            if ((Original_longitud.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_longitud.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_diametro.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_diametro.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idArbol, System.Nullable<double> longitud, System.Nullable<double> diametro) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idArbol));
            if ((longitud.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((double)(longitud.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((diametro.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(diametro.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idArbol, System.Nullable<double> longitud, System.Nullable<double> diametro, long Original_idArbol, System.Nullable<double> Original_longitud, System.Nullable<double> Original_diametro) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idArbol));
            if ((longitud.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(longitud.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((diametro.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(diametro.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_idArbol));
            if ((Original_longitud.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Original_longitud.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_diametro.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(Original_diametro.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Tipo_SueloTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Tipo_SueloTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Tipo_Suelo";
            tableMapping.ColumnMappings.Add("idTipo_Suelo", "idTipo_Suelo");
            tableMapping.ColumnMappings.Add("nombre_TipoSuelo", "nombre_TipoSuelo");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tipo_Suelo] WHERE (([idTipo_Suelo] = @Original_idTipo_Suelo) A" +
                "ND ([nombre_TipoSuelo] = @Original_nombre_TipoSuelo))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_TipoSuelo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_TipoSuelo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tipo_Suelo] ([idTipo_Suelo], [nombre_TipoSuelo]) VALUES (@idTi" +
                "po_Suelo, @nombre_TipoSuelo);\r\nSELECT idTipo_Suelo, nombre_TipoSuelo FROM Tipo_S" +
                "uelo WHERE (idTipo_Suelo = @idTipo_Suelo)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_TipoSuelo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_TipoSuelo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Tipo_Suelo] SET [idTipo_Suelo] = @idTipo_Suelo, [nombre_TipoSuelo] = @nombre_TipoSuelo WHERE (([idTipo_Suelo] = @Original_idTipo_Suelo) AND ([nombre_TipoSuelo] = @Original_nombre_TipoSuelo));
SELECT idTipo_Suelo, nombre_TipoSuelo FROM Tipo_Suelo WHERE (idTipo_Suelo = @idTipo_Suelo)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nombre_TipoSuelo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_TipoSuelo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_idTipo_Suelo", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "idTipo_Suelo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nombre_TipoSuelo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre_TipoSuelo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Reportes.Properties.Settings.Default.dbbosque2ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT idTipo_Suelo, nombre_TipoSuelo FROM dbo.Tipo_Suelo";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.Tipo_SueloDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.Tipo_SueloDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.Tipo_SueloDataTable dataTable = new DataSet1.Tipo_SueloDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.Tipo_SueloDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "Tipo_Suelo");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_idTipo_Suelo, string Original_nombre_TipoSuelo) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_idTipo_Suelo));
            if ((Original_nombre_TipoSuelo == null)) {
                throw new System.ArgumentNullException("Original_nombre_TipoSuelo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_nombre_TipoSuelo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long idTipo_Suelo, string nombre_TipoSuelo) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(idTipo_Suelo));
            if ((nombre_TipoSuelo == null)) {
                throw new System.ArgumentNullException("nombre_TipoSuelo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(nombre_TipoSuelo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long idTipo_Suelo, string nombre_TipoSuelo, long Original_idTipo_Suelo, string Original_nombre_TipoSuelo) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(idTipo_Suelo));
            if ((nombre_TipoSuelo == null)) {
                throw new System.ArgumentNullException("nombre_TipoSuelo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(nombre_TipoSuelo));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Original_idTipo_Suelo));
            if ((Original_nombre_TipoSuelo == null)) {
                throw new System.ArgumentNullException("Original_nombre_TipoSuelo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_nombre_TipoSuelo));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591